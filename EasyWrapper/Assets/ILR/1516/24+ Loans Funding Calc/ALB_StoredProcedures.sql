use [Intrajob_1516]
GO
if object_id('[Rulebase].[ALB_Get_Cases]','p') is not null
	drop procedure [Rulebase].[ALB_Get_Cases]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Get_Cases] as

	begin
		set nocount on
		select
			CaseData
		from
			[Rulebase].[ALB_Cases]
	end
GO
if object_id('[Rulebase].[ALB_Insert_Cases]','p') is not null
	drop procedure [Rulebase].[ALB_Insert_Cases]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Insert_Cases] as

	begin
		set nocount on

		insert into
			[Rulebase].[ALB_Cases]
			(
				[LearnRefNumber],
				CaseData
			)
		select
			ControllingTable.[LearnRefNumber],
			convert(xml,
				(
					select
						[LARS_Current_Version].[CurrentVersion] as [@LARSVersion],
						case when [ORG_Funding].[FundingFactorValue] = '1' then 'true' else 'false' end as [@SpecialistResources],
						[LearningProvider].[UKPRN] as [@UKPRN],
						(
						select
							[Learner].[LearnRefNumber] as [@LearnRefNumber],
							(
							select
								[LearningDelivery].[LearnRefNumber] as [@LearnRefNumber],
								[LearningDelivery].[AimSeqNumber] as [@AimSeqNumber],
								[PostcodeAreaCost].[SFA_AreaCostFactor] as [@AreaCostFactor],
								[LearningDelivery].[CompStatus] as [@CompStatus],
								[LearningDelivery].[LearnActEndDate] as [@LearnActEndDate],
								[LARS_LearningDelivery].[LearnAimRefType] as [@LearnAimRefType],
								[LearningDelivery].[LearnPlanEndDate] as [@LearnPlanEndDate],
								[LearningDelivery].[LearnStartDate] as [@LearnStartDate],
								[LearningDelivery].[LrnDelFAM_ADL] as [@LrnDelFAM_ADL],
								[LearningDelivery].[LrnDelFAM_RES] as [@LrnDelFAM_RES],
								[LARS_LearningDelivery].[NotionalNVQLevelv2] as [@NotionalNVQLevelv2],
								[LearningDelivery].[OrigLearnStartDate] as [@OrigLearnStartDate],
								[LearningDelivery].[OtherFundAdj] as [@OtherFundAdj],
								[LearningDelivery].[Outcome] as [@Outcome],
								[LearningDelivery].[PriorLearnFundAdj] as [@PriorLearnFundAdj],
								[LARS_LearningDelivery].[RegulatedCreditValue] as [@RegulatedCreditValue],
								convert(xml,
									(	select
											convert(xml,
												(	
													select
														X.[Date] AS [@Date],
														X.[Value] AS [@Value]
													from
														(
															select
																[LARS_Funding].[EffectiveFrom] AS [Date], 
																CONVERT(VARCHAR(25),[LARS_Funding].[RateWeighted]) AS [Value] 
															from
																[$(LARS)].[Version_003].[LARS_Funding]
															where
																[LARS_Funding].[LearnAimRef] = [LearningDelivery].[LearnAimRef]
																and [LARS_Funding].[FundingCategory] = 'Matrix'			
															union all select
																dateadd(d,1,X.[EffectiveTo]) as [Date],
																'unknown-val' as [Value]
															from
																(
																	select
																		[LearnAimRef], 
																		[EffectiveFrom], 
																		[EffectiveTo], 
																		[RateWeighted],
																		dense_rank() over (partition by [LearnAimRef] order by [EffectiveFrom] desc) as RecordRank
																	from
																		[$(LARS)].[Version_003].[LARS_Funding]
																	where
																		[LARS_Funding].[LearnAimRef] = [LearningDelivery].[LearnAimRef]
																		and [LARS_Funding].[FundingCategory] = 'Matrix'			
																) as X
															where
																RecordRank=1
																and X.[EffectiveTo] is not null
														) as X for xml path('ChangePoint')
												)
											) for xml path('MatrixWeightedRate'), type
									)
								),
								convert(xml,
									(	select
											convert(xml,
												(	
													select
														X.[Date] AS [@Date],
														X.[Value] AS [@Value]
													from
														(
															select
																[LARS_Funding].[EffectiveFrom] AS [Date], 
																CONVERT(VARCHAR(25),[LARS_Funding].[WeightingFactor]) AS [Value] 
															from
																[$(LARS)].[Version_003].[LARS_Funding]
															where
																[LARS_Funding].[LearnAimRef] = [LearningDelivery].[LearnAimRef]
																and [LARS_Funding].[FundingCategory] = 'Matrix'			
															union all select
																dateadd(d,1,X.[EffectiveTo]) as [Date],
																'unknown-val' as [Value]
															from
																(
																	select
																		[LearnAimRef], 
																		[EffectiveFrom], 
																		[EffectiveTo], 
																		[WeightingFactor],
																		dense_rank() over (partition by [LearnAimRef] order by [EffectiveFrom] desc) as RecordRank
																	from
																		[$(LARS)].[Version_003].[LARS_Funding]
																	where
																		[LARS_Funding].[LearnAimRef] = [LearningDelivery].[LearnAimRef]
																		and [LARS_Funding].[FundingCategory] = 'Matrix'			
																) as X
															where
																RecordRank=1
																and X.[EffectiveTo] is not null
														) as X for xml path('ChangePoint')
												)
											) for xml path('MatrixWeightingFactor'), type
									)
								),
								(
								select
									[LearningDeliveryFAM].[LearnDelFAMCode] as [@LearnDelFAMCode],
									[LearningDeliveryFAM].[LearnDelFAMDateFrom] as [@LearnDelFAMDateFrom],
									[LearningDeliveryFAM].[LearnDelFAMDateTo] as [@LearnDelFAMDateTo],
									[LearningDeliveryFAM].[LearnDelFAMType] as [@LearnDelFAMType]
								from
									[Intrajob_1516].[Valid].[LearningDeliveryFAM]
								where
									[LearningDeliveryFAM].[LearnRefNumber] = [LearningDelivery].[LearnRefNumber]
									and [LearningDeliveryFAM].[AimSeqNumber] = [LearningDelivery].[AimSeqNumber]
								for xml path ('LearningDeliveryFAM'), type
								),
								(
								select
									[LARS_LearningDeliveryCategory].[EffectiveFrom] as [@LearnDelCatDateFrom],
									[LARS_LearningDeliveryCategory].[EffectiveTo] as [@LearnDelCatDateTo],
									[LARS_LearningDeliveryCategory].[CategoryRef] as [@LearnDelCatRef]
								from
									[$(LARS)].[Version_003].[LARS_LearningDeliveryCategory]
								where
									[LARS_LearningDeliveryCategory].[LearnAimRef]=[LearningDelivery].[LearnAimRef]
								for xml path ('LearningDeliveryLARSCategory'), type
								)
							from
								[Intrajob_1516].[Valid].[LearningDelivery]
								left join [$(PostcodeFactors)].[RefData].[PostcodeAreaCost]
									on [PostcodeAreaCost].[Postcode]=[LearningDelivery].[DelLocPostCode]
								left join [$(LARS)].[Version_003].[LARS_LearningDelivery]
									on [LARS_LearningDelivery].[LearnAimRef]=[LearningDelivery].[LearnAimRef]
							where
								[LearningDelivery].[LearnRefNumber] = [Learner].[LearnRefNumber]
								and [LearningDelivery].[FundModel]=99
							for xml path ('LearningDelivery'), type
							)
						from
							[Intrajob_1516].[Valid].[Learner]
						where
							[Learner].[LearnRefNumber] = [ControllingTable].[LearnRefNumber]
						for xml path ('Learner'), type
						)
					from
						[$(LARS)].[Version_003].[LARS_Current_Version]
						cross join [Intrajob_1516].[Valid].[LearningProvider]
						left join [$(Org)].[1415].[ORG_Funding]
							on [ORG_Funding].[UKPRN]=[LearningProvider].[UKPRN]
							and [ORG_Funding].[FundingFactorType]='ADULT SKILLS'
							and [ORG_Funding].[FundingFactor]='SPECIALIST RESOURCES'
					for xml path ('global'), type
				)
			)
		from
			[Valid].[Learner] ControllingTable
			inner join
				(
					select distinct
						[LearningDelivery].[LearnRefNumber]
					from
						[Valid].[LearningDelivery]
					where
						[LearningDelivery].[FundModel]=99
				) [Filter_LearningDelivery]
				on [Filter_LearningDelivery].[LearnRefNumber]=[ControllingTable].[LearnRefNumber]
	end
GO
if object_id('[Rulebase].[ALB_Insert_global]','p') is not null
	drop procedure [Rulebase].[ALB_Insert_global]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Insert_global]
	(
		@UKPRN int,
		@LARSVersion varchar(20),
		@PostcodeAreaCostVersion varchar(20),
		@RulebaseVersion varchar(10)
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ALB_global]
		values (
			@UKPRN,
			@LARSVersion,
			@PostcodeAreaCostVersion,
			@RulebaseVersion
		)
	end
GO
if object_id('[Rulebase].[ALB_Insert_Learner]','p') is not null
	drop procedure [Rulebase].[ALB_Insert_Learner]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Insert_Learner]
	(
		@LearnRefNumber varchar(12),
		@ALBSeqNum int
	)
as
	begin
		set nocount on
	end
GO
if object_id('[Rulebase].[ALB_Insert_Learner_PeriodisedValues]','p') is not null
	drop procedure [Rulebase].[ALB_Insert_Learner_PeriodisedValues]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Insert_Learner_PeriodisedValues]
	(
		@LearnRefNumber varchar(12),
		@AttributeName varchar(100),
		@Period_1 decimal(15,5),
		@Period_2 decimal(15,5),
		@Period_3 decimal(15,5),
		@Period_4 decimal(15,5),
		@Period_5 decimal(15,5),
		@Period_6 decimal(15,5),
		@Period_7 decimal(15,5),
		@Period_8 decimal(15,5),
		@Period_9 decimal(15,5),
		@Period_10 decimal(15,5),
		@Period_11 decimal(15,5),
		@Period_12 decimal(15,5)
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ALB_Learner_PeriodisedValues]
				(
					LearnRefNumber,
					AttributeName,
					Period_1,
					Period_2,
					Period_3,
					Period_4,
					Period_5,
					Period_6,
					Period_7,
					Period_8,
					Period_9,
					Period_10,
					Period_11,
					Period_12
				)
		values
			(
				@LearnRefNumber,
				@AttributeName,
				@Period_1,
				@Period_2,
				@Period_3,
				@Period_4,
				@Period_5,
				@Period_6,
				@Period_7,
				@Period_8,
				@Period_9,
				@Period_10,
				@Period_11,
				@Period_12
			)
	end
GO
if object_id('[Rulebase].[ALB_PivotTemporals_Learner]','p') is not null
	drop procedure [Rulebase].[ALB_PivotTemporals_Learner]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_PivotTemporals_Learner] as
	begin
		truncate table [Rulebase].[ALB_Learner_Period]
		insert into
			[Rulebase].[ALB_Learner_Period]
		select
			LearnRefNumber,
			Period,
			max(case AttributeName when 'ALBSeqNum' then Value else null end) ALBSeqNum
		from
			(
				select
					LearnRefNumber,
					AttributeName,
					cast(substring(PeriodValue.Period,8,2) as int) Period,
					PeriodValue.Value
				from
					[Rulebase].[ALB_Learner_PeriodisedValues]
					unpivot (Value for Period in (Period_1,Period_2,Period_3,Period_4,Period_5,Period_6,Period_7,Period_8,Period_9,Period_10,Period_11,Period_12)) as PeriodValue
			) Bob
		group by
			LearnRefNumber,
			Period
	end
GO
if object_id('[Rulebase].[ALB_Insert_LearningDelivery]','p') is not null
	drop procedure [Rulebase].[ALB_Insert_LearningDelivery]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:32
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Insert_LearningDelivery]
	(
		@LearnRefNumber varchar(12),
		@AimSeqNumber int,
		@Achieved bit,
		@ActualNumInstalm int,
		@AdvLoan bit,
		@ALBCode int,
		@ALBPaymentEndDate date,
		@ALBSupportPayment decimal(10,5),
		@ApplicProgWeightFact varchar(1),
		@AreaCostFactAdj decimal(10,5),
		@AreaCostInstalment decimal(10,5),
		@AreaUpliftBalPayment decimal(10,5),
		@AreaUpliftOnProgPayment decimal(10,5),
		@CourseType varchar(100),
		@FundLine varchar(50),
		@FundStart bit,
		@LiabilityDate date,
		@LoanBursAreaUplift bit,
		@LoanBursSupp bit,
		@MaxNumYears int,
		@OutstndNumOnProgInstalm int,
		@PlannedNumOnProgInstalm int,
		@SpecResUplift decimal(10,5),
		@WeightedRate decimal(10,4)
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ALB_LearningDelivery]
		values (
			@LearnRefNumber,
			@AimSeqNumber,
			@Achieved,
			@ActualNumInstalm,
			@AdvLoan,
			@ALBPaymentEndDate,
			@ApplicProgWeightFact,
			@AreaCostFactAdj,
			@AreaCostInstalment,
			@CourseType,
			@FundLine,
			@FundStart,
			@LiabilityDate,
			@LoanBursAreaUplift,
			@LoanBursSupp,
			@MaxNumYears,
			@OutstndNumOnProgInstalm,
			@PlannedNumOnProgInstalm,
			@SpecResUplift,
			@WeightedRate
		)
	end
GO
if object_id('[Rulebase].[ALB_Insert_LearningDelivery_PeriodisedValues]','p') is not null
	drop procedure [Rulebase].[ALB_Insert_LearningDelivery_PeriodisedValues]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:33
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_Insert_LearningDelivery_PeriodisedValues]
	(
		@LearnRefNumber varchar(12),
		@AimSeqNumber int,
		@AttributeName varchar(100),
		@Period_1 decimal(15,5),
		@Period_2 decimal(15,5),
		@Period_3 decimal(15,5),
		@Period_4 decimal(15,5),
		@Period_5 decimal(15,5),
		@Period_6 decimal(15,5),
		@Period_7 decimal(15,5),
		@Period_8 decimal(15,5),
		@Period_9 decimal(15,5),
		@Period_10 decimal(15,5),
		@Period_11 decimal(15,5),
		@Period_12 decimal(15,5)
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ALB_LearningDelivery_PeriodisedValues]
				(
					LearnRefNumber,
					AimSeqNumber,
					AttributeName,
					Period_1,
					Period_2,
					Period_3,
					Period_4,
					Period_5,
					Period_6,
					Period_7,
					Period_8,
					Period_9,
					Period_10,
					Period_11,
					Period_12
				)
		values
			(
				@LearnRefNumber,
				@AimSeqNumber,
				@AttributeName,
				@Period_1,
				@Period_2,
				@Period_3,
				@Period_4,
				@Period_5,
				@Period_6,
				@Period_7,
				@Period_8,
				@Period_9,
				@Period_10,
				@Period_11,
				@Period_12
			)
	end
GO
if object_id('[Rulebase].[ALB_PivotTemporals_LearningDelivery]','p') is not null
	drop procedure [Rulebase].[ALB_PivotTemporals_LearningDelivery]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 21 July 2015 10:33
-- Profile: 1516 Test Harness Calculation
-- Rulebase Version: DCSS 1516 24+ Loans Calculation 1516, Drop 002, Version 1516.04
-- =====================================================================================================
create procedure [Rulebase].[ALB_PivotTemporals_LearningDelivery] as
	begin
		truncate table [Rulebase].[ALB_LearningDelivery_Period]
		insert into
			[Rulebase].[ALB_LearningDelivery_Period]
		select
			LearnRefNumber,
			AimSeqNumber,
			Period,
			max(case AttributeName when 'ALBCode' then Value else null end) ALBCode,
			max(case AttributeName when 'ALBSupportPayment' then Value else null end) ALBSupportPayment,
			max(case AttributeName when 'AreaUpliftBalPayment' then Value else null end) AreaUpliftBalPayment,
			max(case AttributeName when 'AreaUpliftOnProgPayment' then Value else null end) AreaUpliftOnProgPayment
		from
			(
				select
					LearnRefNumber,
					AimSeqNumber,
					AttributeName,
					cast(substring(PeriodValue.Period,8,2) as int) Period,
					PeriodValue.Value
				from
					[Rulebase].[ALB_LearningDelivery_PeriodisedValues]
					unpivot (Value for Period in (Period_1,Period_2,Period_3,Period_4,Period_5,Period_6,Period_7,Period_8,Period_9,Period_10,Period_11,Period_12)) as PeriodValue
			) Bob
		group by
			LearnRefNumber,
			AimSeqNumber,
			Period
	end
GO
